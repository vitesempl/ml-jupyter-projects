В этом видео мы начнем знакомиться с языком Python. Python был задуман еще в 80-х годах. Его автором является Гвидо ван Россум, работавший тогда в центре математики и информатики в Нидерландах. Гвидо до сих пор принимает активное участие в жизни языка. У него даже есть особое звание — «великодушный пожизненный диктатор». Это особый термин, означающий создателя или главу некоторого проекта, который до сих пор принимает активное участие в его развитии. Существует 3 версии языка: Python1, Python2 и Python3. На сегодняшний день наиболее популярными являются последние 2 версии — Python2 и Python3. Обе эти ветки поддерживаются, однако между ними нет обратной совместимости. Мы с вами будем работать со второй версией. Это означает, что весь код, который мы будем писать, будет написан под Python 2.7. Однако, если вам Python понравится, вы можете самостоятельно изучить также 3-ю версию. Под нее уже портированы и работают практически все популярные библиотеки, поэтому пробуйте, вам должно быть легко. Теперь пара слов о лицензии. Python распространяется свободно. Практически все его версии попадают под действие Python Software Foundation license. Это означает, что они имеют открытый исходный код, а также могут быть использованы не только для личных или учебных целей, но и для создания коммерческих продуктов. Это здорово. Python портирован и работает практически под все известные операционные системы. Это означает, в частности, что он работает под Microsoft Windows, практически под всё семейство UNIX, под Mac OS и Mac OS X. Более того, Python работает даже с такими операционными системами, как iOS, Android или Windows Mobile. Одно из ключевых свойств Python — это его простота. Python имеет простой и лаконичный синтаксис, поэтому под него легко начать писать программы, даже если у вас нет опыта программирования. Более того, интуитивный синтаксис Python позволяет легко находить ошибки в вашем коде, а также быстро читать и понимать чужой код — это очень важно. У Python есть два режима запуска: это стандартный режим и интерактивный режим. Если мы работаем в стандартном режиме, то нам сначала нужно создать файл с кодом, сохранить его нужно с расширением .py, после чего этот файл нужно подать на вход интерпретатору, так как Python — интерпретируемый язык. Упрощенно это можно понимать следующим образом: у нас отсутствует этап компиляции кода, но при этом интерпретатор анализирует наш код построчно или покомандно и сразу же эти команды выполняет. Фактически, если в какой-то команде происходит ошибка, то в этом месте выполнение прекращается, и мы получаем сообщение об ошибке. В интерактивном режиме всё устроено несколько иначе. Мы запускаем Python в интерактивном режиме, после чего имеем возможность подавать ему на вход различные команды. При этом результат работы команд мы видим сразу. Более того, если где-то произошла ошибка, выполнение не прекращается, мы просто получаем сообщение об ошибке и можем экспериментировать дальше. Это очень удобно, когда мы только изучаем язык. Мы с вами часто будем работать в этом режиме. Кстати, многие любят использовать интерактивный Python как онлайн-калькулятор. Действительно, это удобно. Вы можете использовать не только простые арифметические операции, такие как сложение или вычитание, но и что-то более интересное. Например, можно использовать тригонометрию, логарифмы, факториалы. Вам просто нужно импортировать эти функции из соответствующих библиотек. Теперь давайте поговорим об эффективности. Часто программы, написанные на интерпретируемых языках программирования, работают несколько дольше, чем их аналоги, написанные на компилируемых языках. В частности, для ряда задач время выполнения программы может быть дольше. С другой стороны, мы обсудили целый ряд свойств Python, которые позволяют сделать разработку программ на нем довольно эффективной. Это значит, что не так много времени проходит с момента написания программы до момента ее корректной работы. Как же нам быть? Нам хочется, с одной стороны, экономить время, требуемое на разработку программы, с другой стороны, нам хочется, чтобы наши программы работали эффективно. Давайте подойдем к этому вопросу с практической точки зрения. Предположим, что мы решаем некоторую сложную задачу. Например, решаем задачу кредитного скоринга, где нам нужно оценить кредитоспособность некоторого клиента. Эта задача сложная, потому что информация о клиенте может быть сколь угодно сложна или разнородна, а нам с вами нужно придумать, как правильно ее обрабатывать, как правильно рассчитать целевую функцию, как правильно построить модель. Все эти шаги сложны логически, поэтому нам хочется больше внимания уделить логике работы нашей программы, а не синтаксису. Давайте напишем всё это на простом языке. Дальше возможны два варианта: либо программа сразу будет работать настолько быстро, что нам не захочется ничего менять, либо какие-то части будут работать медленно. Если что-то будет работать недостаточно эффективно, давайте перепишем это на быстром языке. Скорее всего, это будут какие-то стандартные части кода, например разложение матриц. Тогда мы можем переписать это на быстром языке, более того, эта часть будет стандартной, то есть мы напишем ее один раз, а дальше нам не придется часто читать этот код. И тогда мы будем использовать этот код в тех местах, где нам захочется работу несколько ускорить. Есть мнение, что 80 % знания языка — это знание его библиотек. С этой точки зрения Python очень интересен, потому что он содержит огромное количество разнообразных модулей в своей стандартной библиотеке. Например, это модуль codecs для работы с текстом в различных кодировках или модуль re для работы с регулярными выражениями. С другой стороны, Python содержит широкий набор внешних библиотек для решения разнообразных задач. Это может быть библиотека matplotlib для построения графиков или библиотека pandas для работы с данными в виде таблиц. Напоследок хотелось бы сказать несколько слов о философии Python. Если вы наберете команду >> import this, вы увидите так называемый «Дзен Python». Он будет на английском языке. Я вам расскажу несколько наиболее интересных утверждений. «Красивое лучше, чем уродливое. Простое лучше, чем сложное. Читаемость важна». Всё это говорит о том, что Python задумывался как простой, лаконичный язык, читать и писать программы на котором должно быть легко. «Если реализацию сложно объяснить — значит, идея точно плоха. Если же реализацию объяснить легко — значит, идея, возможно, хороша». Всё это говорит о том, что архитектура ваших программ важна. Ее следует продумывать заранее и пытаться строить таким образом, чтобы ваши программы были интуитивно понятны. В конце давайте все-таки ответим на вопрос, почему же мы выбрали именно Python в качестве основного языка для нашего курса и специализации. Во-первых, Python свободно распространяется и работает практически на всех известных платформах. Python прост для изучения и обладает такими важными свойствами, как интерактивность и интерпретируемость. Богатый набор функций стандартной библиотеки и широкий набор внешних библиотек позволяют нам решать практически любые задачи, а также вокруг Python сложилось большое сообщество разработчиков, что очень важно, потому что они разрабатывают новые библиотеки, а также помогают новичкам разобраться с кодом. Наверняка вам уже не терпится установить Python и начать с ним работать. Смотрите следующее видео, в нем даны все инструкции по установке.

[БЕЗ ЗВУКА] В этом видео я покажу, как поставить Python и его библиотеки. Работать мы будем с операционной системой Windows. На самом деле, это довольно простая задача, поэтому есть несколько способов, как это можно сделать. Для демонстрации я выбрала довольно простой способ — установка Python с помощью дистрибутива Anaconda. Anaconda распространяется бесплатно и помимо самого Python включает в себя те библиотеки, которые нам понадобятся для работы. Для того чтобы поставить Anaconda, сначала нужно ее загрузить, для этого давайте перейдем на сайт continuum.io, раздел download. Далее выбираем нужную операционную систему. Мы работаем с Windows. Нам предлагают на выбор два варианта: поставить Python 2.7 или 3.5. Я выбираю Python 2.7. Далее нужно загрузить файл, для экономии времени я это сделала заранее, поэтому давайте перейдем непосредственно к установке. Запускаем установку. Далее нажимаем кнопку «запустить». И следуем инструкциям. Вначале нам предлагают ознакомиться с лицензией. Нужно это обязательно сделать. Сейчас для экономии времени я это так пропущу, но вы обязательно прочтите. Далее нам предлагают выбрать путь, по которому мы хотим установить Anaconda, в данном случае стандартный путь нас устраивает, продолжаем. И дальше у нас есть несколько вариантов. Нам предлагают внести изменения в наше переменное окружение, с тем чтобы Python по умолчанию запускался из Anaconda. Если нас это устраивает, соглашаемся, иначе снимаем галочку. Видим, что начался процесс установки. Итак, теперь мы видим, что наша установка успешно завершена. Нажимаем next и finish. Теперь давайте убедимся, что Python действительно поставился, поставили все нужные библиотеки и все работает. Для этого идем в пункт «меню», «пуск» и ищем Anaconda, она здесь. Давайте сначала попробуем запустить Python в интерактивном режиме, для этого выбираем IPython и видим, что он запустился. Ну, давайте для простоты напишем программу, выводящую строчку: hello, world! на экран. Для этого пишем: print 'hello, world', это очень просто. Да, видим, что все работает. Теперь давайте проверим наличие нужных нам библиотек. Например, посмотрим, установлена ли библиотека Pandas. Для этого нужно попробовать ее импортировать. Делаем это с помощью слова import. [ПЕЧАТАЕТ] И теперь давайте посмотрим, какая версия у установленной нами библиотеки. [ПЕЧАТАЕТ] [ПЕЧАТАЕТ] Мы видим, что библиотека имеет версию 17.1. Это то, что нам нужно. Теперь давайте посмотрим, работает ли у нас IPython Notebook. Для этого снова войдем в «меню», «пуск». И теперь выбираем Jupyter. Jupyter — это просто 4-я версия IPython. Так. Давайте создадим новый файл IPython, файл с расширением ipynb. И также напишем какую-нибудь простую команду, например, также мы выведем строчку: hello, world! на экран. [ПЕЧАТАЕТ] Ну так, видим, что все получилось, на этом можем считать установку Anaconda успешно завершенной.

[БЕЗ ЗВУКА] В этом видео я покажу, как установить Python и библиотеки на UNIX. Это очень простая задача, поэтому есть целый ряд способов, как это можно сделать. Для демонстрации я выбрала один из самых простых — установка с помощью Anaconda. Anaconda распространяется свободно, а также, помимо самого Python, включает в себя те библиотеки, которые нам понадобятся для курса. Итак, чтобы Anaconda поставить, сначала нужно загрузить дистрибутив. Для этого нужно перейти на сайт continuum.io, зайти во вкладку Download и выбрать нужную операционную систему. Мы с вами выбираем Linux. Видим, что нам предлагают два варианта: мы можем поставить Python 2.7 или Python 3.5. В данном случае я выбираю Python 2.7. Я загрузила файл заранее, для экономии времени. Вам же нужно файл сначала загрузить. После загрузки файла смотрим на инструкцию. Нам нужно набрать команду bash и далее — название дистрибутива в терминале. Давайте это сделаем. Сначала давайте убедимся, что наш файл уже загружен. Да, действительно, он здесь, поэтому можно начать установку. Набираем команду, и запускается процесс. Для начала нам предлагают ознакомиться с лицензией. Это обязательно нужно сделать. Я для экономии времени просто ее пролистаю, но тем не менее обязательно ознакомьтесь. [БЕЗ ЗВУКА] Итак, после того как мы ознакомились с лицензией, нам предлагают принять ее условия. Давайте согласимся и будем двигаться дальше. Дальше нам нужно выбрать место, в котором будет устанавливаться Anaconda. Вот то расположение, которое предлагают по умолчанию, меня устраивает, поэтому я соглашусь. Иначе можно прописать другое расположение. Итак, мы видим, что запускается процесс установки. Нам показывают те пакеты, которые ставятся. Нам нужно дождаться окончания этого процесса. Итак, мы видим, что установка практически завершена. Напоследок нам предлагают внести изменения в переменную PATH из файла bashrc. Это нужно для того, чтобы Python по умолчанию запускался из Anaconda. Если мы с этим согласны, набираем yes, если же это неудобно — отказываемся. Я соглашусь. Итак, теперь установка действительно завершена. Давайте убедимся, что по умолчанию наш Python запускается из Anaconda. Для этого набираем команду which python. Действительно, мы видим, что это так. Теперь давайте выполним какие-нибудь простые команды, чтобы убедиться, что все работает. Запускаем iPython. И давайте выведем на экран фразу hello, world! Пишем print hello, world!, это очень просто. И видим, что все работает. Теперь давайте проверим, что библиотеки также установлены. Для этого импортируем некоторую библиотеку и посмотрим, какая у нее версия. Ну вот мне нравится Pandas, давайте с него начнем. Так, теперь посмотрим на версию. Видим, что стоит версия 17.1, нас это устраивает. На этом давайте закончим. И также запустим iPython Notebook, потому что с ним мы будем работать часто. Давайте убедимся, что он также установлен. Так, пишем ipython notebook. [БЕЗ ЗВУКА] Видим, что открылась новая вкладка в браузере. Здесь написано Jupyter, но не пугайтесь, это всего лишь четвертая версия iPython. Итак, создаем новый файл. Нам нужен файл типа ipynb, ipython notebook. И давайте также выведем на экран фразу hello, world! Снова набираем print hello, world! И для запуска нажимаем на значок play. Видим, что все успешно отработало. На этом мы можем закончить.

[БЕЗ_ЗВУКА] В этом видео я покажу, как поставить Python и библиотеки. Работать будем с операционной системой Mac OS X. На самом деле, это очень простая задача, поэтому поставить Python и библиотеки можно разными способами. Для демонстрации я выбрала один из самых простых: установка с помощью дистрибутива Anaconda. Он распространяется свободно и помимо Python включает те библиотеки, которые нам понадобятся для работы. Итак, перейдем к установке. Для начала нам нужно этот дистрибутив загрузить. Для этого переходим на сайт continuum.io, и идем в вкладку downloads. После этого нам нужно выбрать нашу операционную систему. Я выбираю OS X, переходим на нее и видим, что нам предлагают несколько вариантов загрузки. Ну, во-первых, мы можем выбрать между Python 2.7 и Python 3.5. Я выбираю Python 2.7. Дальше можно выбрать загрузку файла для графической установки и для установки с помощью командной строки. Вот я выбрала первый вариант. Вы можете выбрать то, что нравится больше. Для экономии времени дистрибутив я загрузила заранее, поэтому можем двигаться дальше. Так, открываем нужный файл и запускаем процесс установки. Так, далее следуем инструкциям. Обязательно нужно ознакомиться с информацией. Тут перечислены пакеты, которые будут установлены. Я для экономии времени этого делать не буду. Двигаемся дальше. Опять же, нам предлагают прочитать лицензионное соглашение, так же внимательно читаем, принимаем условия, и дальше нам предлагают варианты размещения. Я в данном случае установлю только для себя. Вы можете опять же выбрать любой вариант. Вот. И выбираем стандартную установку. Видим, что идет подготовка к установке и ожидаем начала процесса установки Anaconda. Итак, мы видим, что установка успешно завершена. Теперь давайте убедимся, что все работает. Для этого откроем терминал и запустим IPython в интерактивном режиме. [ПЕЧАТАЕТ] Для простоты давайте выведем на экран строчку 'hello, world!'. Делаем это с помощью команды print. Вот так. Видим, что все работает. Теперь давайте проверим, что наши библиотеки установлены. Например, попробуем импортировать библиотеку pandas. [ПЕЧАТАЕТ] Теперь давайте посмотрим, какая у нее версия. [ПЕЧАТАЕТ] Версия 17.1 — то, что нам нужно. Теперь давайте попробуем запустить Python в режиме IPython ноутбука. Мы будем этим часто пользоваться, поэтому давайте сразу убедимся, что это работает. [ПЕЧАТАЕТ] Видим, что открылась новая вкладка в браузере. Давайте создадим файл типа ipynb и попробуем в нем что-нибудь сделать. Например, давайте снова выведем на экран строчку 'hello, world!'. [ПЕЧАТАЕТ] Вот так. Для запуска нажимаем на треугольничек. Видим, что все работает, наша строчка появилась. На этом мы можем закончить. Наша установка завершилась успешно.

В этом видео мы начнем знакомство с IPython Notebook. На моем компьютере уже установлен IPython, и поэтому с помощью соответствующей команды в браузере я могу его запустить. При этом откроется новая вкладка, в которой будут перечислены все те файлы, которые лежат в директории запуска. Для создания нового файла достаточно нажать на кнопку New справа сверху и выбрать тип файла. Нам подходит Python 2. При этом в соседней вкладке появляется новый IPython Notebook, он пока что без названия, мы можем его задать. Давайте это сделаем. Я напишу introduction_to_python, вы можете выбрать любое название. Нажимаем кнопку OK. После этого в той директории, с которой мы запускали IPython, появится файл с этим именем и расширением ipython nb — ipynb. Итак, теперь давайте посмотрим на меню, которое у нас здесь в верхней строчке. На самом деле, меню достаточно интуитивное, поэтому прокомментирую очень коротко. Первая вкладка File предназначена для работы с самим файлом IPython Notebook'а. Из интересного здесь Download as — оно позволяет нам сохранить наш ноутбук, при этом это можно сделать в разных форматах — не только как ipynb-файл, но также как простой питоновский файл. Более того, мы можем выбрать сохранение с помощью html или pdf. Это довольно удобно, потому что если вам хочется поделиться результатами анализа с кем-то, кто не использует IPython или не использует Python в принципе, будет достаточно удобно сохранить это в виде pdf-документа и поделиться — тогда этот человек сможет просто его прочесть. Следующая вкладка — Edit, она отвечает за работу с ячейками. Еще одна вкладка — View — говорит о том, как может выглядеть наш IPython. Вот можем, допустим, скрыть верхнее меню, можем его снова вернуть, вот довольно удобно. Вкладка Insert позволяет нам вставлять ячейки, вкладка Cell отвечает за запуск ячеек и за то, как выглядит наш Output. Вкладка Kernel отвечает за работу с ядром: мы можем его прервать, можем его перегрузить, можем к нему подконнектиться заново. И вкладка Help позволяет нам получить подсказку по тем компонентам, с которыми мы работаем. Это может быть подсказка как по библиотекам, так и по составным частям ноутбука. Нижнее меню тоже довольно простое — при наведении на каждую иконку появляется комментарий. Первая иконка означает сохранение документа, следующая — добавление новой ячейки. Также ячейки можно вырезать, копировать, вставлять, двигать вверх-вниз, их можно запускать, можно прерывать выполнение и также можно перегружать ядро. Теперь давайте напишем нашу первую команду. Традиционно это будет команда 'hello, world!' — нужно будет вывести эту строчку на экран. У IPython это делается достаточно просто — достаточно просто написать эту строчку и запустить соответствующую ячейку. С этого и начнем. Итак, видим, что в качестве результата мы получили строку 'hello, world!'. Ну, можно поступить чуть более интересно — давайте создадим переменную и запишем в нее строчку 'hello, world!'. Ну вот, переменная получилась однобуквенная, не очень хорошо с точки зрения стиля, но ничего страшного. Так, создаем нашу строчку и запускаем. Теперь давайте выведем эту переменную на экран. Опять же это можно сделать двумя способами. Во-первых, можно просто запустить ячейку с этой переменной. Видим, в качестве результата выводится ее значение. Либо можно явно вызвать метод print. Также напечатали значение переменной. Двигаемся дальше. Часто IPython используют в качестве интерактивного калькулятора. Давайте и мы с вами попробуем что-нибудь посчитать. Ну давайте возведем число в степень. Это делается с помощью двойной звездочки. Вот видим, что получили правильный результат — действительно, 6 в четвертой степени. Можем попробовать деление. Видим, что когда мы делим одно целочисленное число на другое, предполагается, что и в качестве результата мы тоже ожидаем целочисленный тип — вот поэтому получили здесь число 8. Если же это не так и хочется получить точный результат в виде числа с плавающей точкой, то вот опять же можно это сделать разными способами. Самое простое — это перевести одно из этих чисел в тип float. Вот так мы и делаем и получаем результат с плавающей точкой. Но не всегда нам удобно работать с такими длинными числами, давайте его немножечко подсократим. Допустим, сделаем это с помощью округления. Для этого есть встроенная функция round. В качестве первого аргумента передаем ей выражение, которое мы хотим округлить. Давайте это же выражение и передадим. Второй аргумент — это количество знаков после запятой, которые мы хотим оставить. Ну давайте оставим три знака после запятой. Вот видите, получилось довольно компактная запись числа. На самом деле, это достаточно простые арифметические функции. Если вам хочется чего-то более интересного, то тут есть два варианта. Во-первых, нужную функцию вы можете самостоятельно реализовать, потом ею пользоваться. Второй вариант, как более предпочтительный — это импорт функций соответствующей библиотеки. Скорее всего, если вам нужно какое-то арифметическое выражение или какая-то функция, то она уже реализована. Вот я хочу посчитать факториал, давайте я его импортирую из библиотеки math. [БЕЗ_ЗВУКА] Итак, функция импортирована, теперь можно ее применять. Давайте посчитаем факториал от какого-нибудь небольшого числа, чтобы было легко проверить. Ну вот факториал, допустим, от трех. Он равен шести, все правильно. Ну теперь давайте посчитаем что-нибудь более интересное, например, факториал от десяти, ну, там умножим его на 0.5. Вот наш результат, тоже довольно просто. Еще одна особенность IPython, про которую хочется упомянуть — это гибкая работа с текстом. Вы можете оставлять комментарии, делить ваш IPython по заголовкам и даже редактировать формулы. Все это очень удобно и сильно повышает читаемость вашего ноутбука, поэтому я всячески советую этим пользоваться. Делается это довольно просто: мы создаем новую ячейку и дальше нам нужно поменять ее тип. Так как ячейку мы не планируем запускать — в том смысле, что мы не планируем писать в ней никакой код, — нужно задать ей тип Markdown. Теперь дальше. Можем написать здесь любой комментарий, который мы хотим видеть в этом месте. Ну давайте для примера просто напишем слово text, запустим ячейку и увидим, что вот этот комментарий теперь здесь останется. Если мы хотим добавить, например, заголовок, то нужно воспользоваться специальным символом. Заголовок обозначается с помощью решетки. Естественно, количество решеток соответствует уровню вашего заголовка. Чем больше решеток, тем ниже уровень заголовка. Ну вот, допустим, давайте сделаем заголовок первого уровня, для этого нам достаточно одной решетки. Напишем слово Header. Так. И теперь поменяем тип ячейки. Готово. Запускаем ее и видим, что появился наш заголовок. Теперь давайте сделаем нечто более интересное, а именно — напишем красивую формулу. Итак, снова меняем тип нашей ячейки. Формула начинается с двойного знака доллара. Ну и давайте напишем какую-нибудь формулу, знакомую всем с детства. Ну вот, например, следующую: квадратный корень из суммы квадратов катетов равен гипотенузе — например, это. Так. Синтаксис довольно простой. И заканчивает формулу опять же двойной знак доллара. Так. Видим, что получилась довольно симпатичная формула, соответственно, такими формулами вы можете пояснять весь свой код. [БЕЗ_ЗВУКА] Напоследок хочется показать еще несколько интересных функций. Ну, во-первых, мы можем вызывать команды bash прямо из IPython. Это делается с помощью восклицательного знака. Пишем восклицательный знак, а дальше — команду, которую мы хотим запустить. Ну давайте мы для простоты запишем, запустим команду echo, напишем в ней снова 'hello, world!' и запустим ее. Вот видите, результат у нас выводится прямо внутри IPython. Кстати, часто бывает удобно передавать туда питоновские переменные — это делается с помощью знака доллара. Помните, в самом начале мы создавали переменную, в которую записывали строчку 'hello, world!'? Вот давайте ее выведем, переменная называлась буквой t. Вот видите, все получается аналогично — тоже появилась строчка 'hello, world!'. Но это, что касается работа с простыми командами. Если нам хочется написать чуть более длинную команду, ну, например, состоящую из двух и более строк, то нам понадобится чуть более сложный синтаксис. Нам нужно будет вызвать так называемый bash magic. Делается это довольно просто: мы пишем два знака процента и далее — слово bash. После этого мы можем писать нашу команду, сколь угодно длинную. Ну давайте напишем для примера команду из двух строк, перейдем в другую директорию, ну и, допустим, выведем на экран, что в ней. Запускаем и видим, что ничего не вывелось, ну просто потому что директория пустая. Можем сделать вот так: ls − l — вот, действительно, написано, что нет ни одного файла. На самом деле, bash magic — далеко не единственный, который предоставляет нам IPython. Чтобы просмотреть весь список, нужно написать команду lsmagic. Видите, открылся довольно большой список, изучите его обязательно — я уверена, что вы найдете там что-то интересное для себя. А мы тем временем двигаемся дальше. И последнее, что хотелось бы показать — это работа с графиками в IPython. Для этого нам нужно также воспользоваться magic'ом, он называется pylab. Кстати, здесь он тоже перечислен, можете его найти. И нам нужно запустить его в режиме inline — эта команда позволит нам отрисовывать графики прямо внутри нашего IPython. Запускаем эту команду, и теперь давайте построим какой-нибудь простой график, например y = x. Для этого заведем наш y — это будет массив от 1 до 10. Давайте я его выведу на экран, чтобы вы в этом убедились. Действительно, обычный список. Итак, мы видим, что y — это массив чисел от 0 до 10, поэтому теперь давайте построим простой график y = x. Для этого нужно вызвать команду plot, передаем ей y в качестве аргумента и строим график. И вот на этом простом симпатичном графике хотелось бы закончить наше знакомство с ноутбуками, а начиная со следующего видео, вы будете более плотно знакомиться с синтаксисом языка Python.